compileOnly java.lang.String.hashCode.*
compileOnly java.util.ImmutableCollections$SetN.probe.*
compileOnly java.lang.Math.floorMod.*
compileOnly java.util.ImmutableCollections$SetN.hashCode.*
compileOnly java.lang.StringLatin1.equals.*
compileOnly java.lang.String.equals.*
compileOnly java.util.Objects.equals.*
compileOnly java.util.Set.of.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.lang.module.ModuleDescriptor$Exports.hashCode.*
compileOnly java.util.Set.of.*
compileOnly java.lang.String.coder.*
compileOnly java.lang.module.ModuleDescriptor.name.*
compileOnly java.lang.String.length.*
compileOnly java.lang.module.ModuleReference.descriptor.*
compileOnly java.lang.String.isLatin1.*
compileOnly java.lang.String.charAt.*
compileOnly java.lang.StringLatin1.charAt.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.lang.String.charAt.*
compileOnly java.lang.String.charAt.*
compileOnly java.lang.StringLatin1.canEncode.*
compileOnly java.lang.String.isEmpty.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.StringLatin1.lastIndexOf.*
compileOnly java.io.File.getPrefixLength.*
compileOnly java.io.File.getPath.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.nextIndex.*
compileOnly java.util.concurrent.ConcurrentHashMap.tabAt.*
compileOnly java.util.concurrent.ConcurrentHashMap.spread.*
compileOnly java.lang.Enum.ordinal.*
compileOnly java.util.concurrent.ConcurrentHashMap.addCount.*
compileOnly java.lang.Math.min.*
compileOnly java.lang.Class.getClassLoader0.*
compileOnly java.lang.invoke.MethodType.returnType.*
compileOnly java.lang.invoke.MemberName.testFlags.*
compileOnly java.lang.invoke.MethodTypeForm.canonicalize.*
compileOnly java.lang.StringLatin1.hashCode.*
compileOnly java.lang.invoke.MethodType.hashCode.*
compileOnly java.lang.invoke.MemberName.isInvocable.*
compileOnly java.lang.invoke.MemberName.getDeclaringClass.*
compileOnly java.util.concurrent.ConcurrentHashMap.get.*
compileOnly java.lang.StringLatin1.newString.*
compileOnly java.lang.AbstractStringBuilder.ensureCapacityInternal.*
compileOnly java.lang.invoke.MethodType.checkPtype.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.next.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.hasNext.*
compileOnly java.util.HashMap.hash.*
compileOnly java.util.stream.FindOps$FindSink.cancellationRequested.*
compileOnly java.util.Spliterators$IteratorSpliterator.characteristics.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.util.HashMap.put.*
compileOnly java.util.HashMap.newNode.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.HashMap$HashIterator.nextNode.*
compileOnly java.util.HashMap.afterNodeInsertion.*
compileOnly java.util.HashMap$HashIterator.hasNext.*
compileOnly java.lang.module.ModuleDescriptor$Requires.name.*
compileOnly java.lang.String.hashCode.*
compileOnly java.lang.module.ModuleDescriptor$Exports.isQualified.*
compileOnly java.lang.module.ModuleDescriptor$Exports.source.*
compileOnly java.util.ImmutableCollections$Set12.isEmpty.*
compileOnly java.lang.module.ModuleDescriptor$Exports.targets.*
compileOnly java.util.ImmutableCollections$SetN.isEmpty.*
compileOnly java.lang.module.ModuleDescriptor$Requires.modifiers.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.putIfAbsent.*
compileOnly java.util.ImmutableCollections$Set12.contains.*
compileOnly java.util.HashMap.resize.*
compileOnly java.util.ImmutableCollections$SetN.contains.*
compileOnly java.util.ImmutableCollections$Set12$1.hasNext.*
compileOnly java.lang.module.ModuleDescriptor.hashCode.*
compileOnly java.util.HashSet.add.*
compileOnly java.util.HashMap$KeyIterator.next.*
compileOnly java.util.ImmutableCollections$SetN.size.*
compileOnly java.lang.module.ModuleDescriptor.isAutomatic.*
compileOnly java.lang.module.ModuleDescriptor.requires.*
compileOnly java.lang.module.ModuleDescriptor.exports.*
compileOnly java.lang.module.ResolvedModule.reference.*
compileOnly java.lang.module.ResolvedModule.hashCode.*
compileOnly java.util.ImmutableCollections$MapN.probe.*
compileOnly java.lang.String.hashCode.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.next.*
compileOnly java.util.HashMap.containsKey.*
compileOnly java.util.concurrent.ConcurrentHashMap.putIfAbsent.*
compileOnly java.lang.module.ModuleDescriptor.provides.*
compileOnly java.lang.module.ModuleDescriptor.uses.*
compileOnly java.util.KeyValueHolder.getKey.*
compileOnly java.util.KeyValueHolder.getValue.*
compileOnly java.lang.module.ModuleDescriptor.packages.*
compileOnly java.util.ImmutableCollections$SetN.iterator.*
compileOnly java.lang.AbstractStringBuilder.isLatin1.*
compileOnly java.util.Optional.ofNullable.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.next.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.nextIndex.*
compileOnly java.lang.module.ModuleDescriptor$Version.toString.*
compileOnly java.lang.String.getBytes.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.nextIndex.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.hasNext.*
compileOnly java.util.ImmutableCollections$SetN$SetNIterator.hasNext.*
compileOnly java.util.HashMap.keySet.*
compileOnly java.util.HashMap.afterNodeInsertion.*
compileOnly java.util.HashMap.afterNodeInsertion.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.HashMap$KeySet.iterator.*
compileOnly java.util.HashSet.iterator.*
compileOnly java.util.ImmutableCollections$Set12$1.next.*
compileOnly java.util.ImmutableCollections$Set12.size.*
compileOnly java.lang.module.ResolvedModule.configuration.*
compileOnly java.util.ImmutableCollections$Set12.iterator.*
compileOnly java.lang.module.ResolvedModule.name.*
compileOnly java.lang.module.ModuleDescriptor$Provides.service.*
compileOnly java.util.HashMap$ValueIterator.next.*
compileOnly java.lang.module.ModuleDescriptor.isOpen.*
compileOnly java.util.ImmutableCollections$MapN.get.*
compileOnly java.lang.Module.getDescriptor.*
compileOnly java.util.HashMap.size.*
compileOnly java.net.URL.getFile.*
compileOnly java.net.URL.getRef.*
compileOnly java.net.URL.getProtocol.*
compileOnly java.util.Arrays.copyOfRange.*
compileOnly java.lang.AbstractStringBuilder.putStringAt.*
compileOnly java.lang.AbstractStringBuilder.getCoder.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.HashMap.newNode.*
compileOnly java.util.zip.ZipUtils.SH.*
compileOnly java.util.HashMap.newNode.*
compileOnly java.lang.String.equals.*
compileOnly java.util.zip.ZipFile$Source.hashN.*
compileOnly java.util.zip.ZipUtils.LG.*
compileOnly java.util.zip.ZipUtils.CENNAM.*
compileOnly java.util.zip.ZipUtils.CENFLG.*
compileOnly java.util.zip.ZipFile$Source.addEntry.*
compileOnly java.util.zip.ZipUtils.CENSIG.*
compileOnly java.lang.String.equals.*
compileOnly java.util.zip.ZipUtils.SH.*
compileOnly java.util.zip.ZipUtils.CENHOW.*
compileOnly java.util.zip.ZipUtils.CENEXT.*
compileOnly java.util.zip.ZipUtils.CENCOM.*
compileOnly java.util.zip.ZipFile$Source.isMetaName.*
compileOnly java.util.zip.ZipUtils.SH.*
compileOnly sun.nio.fs.UnixPath.checkNotNul.*
compileOnly java.lang.System.getSecurityManager.*
compileOnly java.lang.System.allowSecurityManager.*
compileOnly java.util.zip.ZipFile$Source.addEntry.*
compileOnly java.util.zip.ZipFile$Source.addEntry.*
compileOnly java.lang.module.ModuleDescriptor$Exports.isQualified.*
compileOnly java.lang.module.ModuleDescriptor$Exports.isQualified.*
compileOnly java.lang.String.startsWith.*
compileOnly java.lang.String.isLatin1.*
compileOnly java.lang.String.isLatin1.*
compileOnly java.util.zip.ZipFile$Source.hashN.*
compileOnly java.util.zip.ZipFile$Source.hashN.*
compileOnly java.lang.Math.max.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.ref.Reference.reachabilityFence.*
compileOnly java.io.UnixFileSystem.normalize.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.lang.Integer.intValue.*
compileOnly java.lang.AbstractStringBuilder.newCapacity.*
compileOnly java.net.URL.getHost.*
compileOnly java.util.zip.ZipUtils.CENNAM.*
compileOnly java.util.zip.ZipUtils.CENNAM.*
compileOnly java.util.zip.ZipUtils.CENHOW.*
compileOnly java.util.Arrays.copyOf.*
compileOnly java.util.zip.ZipUtils.CENHOW.*
compileOnly java.util.zip.ZipUtils.CENEXT.*
compileOnly java.util.ArrayList.add.*
compileOnly java.util.zip.ZipUtils.CENEXT.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.util.ArrayList.add.*
compileOnly java.util.zip.Inflater$InflaterZStreamRef.address.*
compileOnly java.util.zip.ZipFile$Source.getEntryHash.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.util.zip.ZipFile$Source.getEntryNext.*
compileOnly java.io.RandomAccessFile.read.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.util.zip.ZipUtils.CENCOM.*
compileOnly java.util.zip.ZipUtils.CENCOM.*
compileOnly java.util.zip.ZipUtils.LG.*
compileOnly java.lang.ref.Cleaner$1.apply.*
compileOnly java.lang.CharacterDataLatin1.getProperties.*
compileOnly java.util.zip.ZipUtils.LG.*
compileOnly java.util.zip.ZipUtils.CENFLG.*
compileOnly java.util.zip.ZipUtils.CENFLG.*
compileOnly java.util.zip.ZipUtils.CENSIG.*
compileOnly java.nio.Buffer.position.*
compileOnly java.lang.Class.getName.*
compileOnly java.util.zip.ZipUtils.CENSIG.*
compileOnly java.util.zip.ZipFile$Source.isMetaName.*
compileOnly java.lang.Character.toUpperCaseEx.*
compileOnly java.lang.CharacterDataLatin1.toUpperCaseEx.*
compileOnly java.io.RandomAccessFile.readFully.*
compileOnly java.util.zip.ZipFile$Source.isMetaName.*
compileOnly java.lang.Math.max.*
compileOnly java.nio.Buffer.limit.*
compileOnly java.lang.Math.max.*
compileOnly java.util.HashMap.putVal.*
compileOnly sun.nio.fs.UnixPath.checkNotNul.*
compileOnly sun.nio.fs.UnixPath.checkNotNul.*
compileOnly java.lang.String.endsWith.*
compileOnly java.lang.StringCoding.hasNegatives.*
compileOnly java.util.ArrayList.get.*
compileOnly java.util.Objects.checkIndex.*
compileOnly java.nio.Buffer.position.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.lang.Character.toLowerCase.*
compileOnly java.lang.String.value.*
compileOnly java.io.RandomAccessFile.seek.*
compileOnly java.util.ArrayList.size.*
compileOnly sun.nio.fs.NativeBuffer.address.*
compileOnly java.net.URL.getUserInfo.*
compileOnly java.lang.ThreadLocal.getMap.*
compileOnly java.lang.ThreadLocal.get.*
compileOnly java.lang.ThreadLocal$ThreadLocalMap.getEntry.*
compileOnly java.nio.charset.CoderResult.isUnderflow.*
compileOnly java.lang.CharacterDataLatin1.toLowerCase.*
compileOnly java.io.File.isInvalid.*
compileOnly java.lang.Integer.valueOf.*
compileOnly java.io.UnixFileSystem.prefixLength.*
compileOnly java.lang.String.startsWith.*
compileOnly java.util.ArrayDeque.inc.*
compileOnly java.util.zip.ZipFile.ensureOpen.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.lang.StringBuilder.append.*
compileOnly sun.nio.fs.UnixPath.getFileSystem.*
compileOnly java.nio.ByteBuffer.position.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.lang.StringCoding.encodeUTF8.*
compileOnly java.lang.StringBuilder.toString.*
compileOnly java.lang.String.substring.*
compileOnly java.lang.String.checkBoundsBeginEnd.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.util.concurrent.ConcurrentHashMap.casTabAt.*
compileOnly java.lang.Class.getModule.*
compileOnly java.lang.String.checkBoundsOffCount.*
compileOnly java.util.jar.JarFile.getJarEntry.*
compileOnly java.lang.invoke.MethodType.form.*
compileOnly java.lang.invoke.MethodType.parameterCount.*
compileOnly java.util.zip.ZipCoder$UTF8.getBytes.*
compileOnly java.lang.System$2.getBytesUTF8NoRepl.*
compileOnly java.lang.StringCoding.getBytesUTF8NoRepl.*
compileOnly java.lang.StringUTF16.compress.*
compileOnly java.net.URL.getPort.*
compileOnly java.net.URL.getAuthority.*
compileOnly java.net.URL.getPath.*
compileOnly java.net.URL.getQuery.*
compileOnly java.lang.invoke.MethodType.ptypes.*
compileOnly java.util.jar.Attributes$Name.hashCode.*
compileOnly java.util.concurrent.ConcurrentHashMap.setTabAt.*
compileOnly java.lang.StringConcatHelper.newArray.*
compileOnly java.net.URL.isBuiltinStreamHandler.*
compileOnly java.lang.Character.toLowerCase.*
compileOnly java.lang.Character.toUpperCase.*
compileOnly java.lang.Character.toUpperCase.*
compileOnly sun.net.www.ParseUtil.firstEncodeIndex.*
compileOnly java.lang.CharacterDataLatin1.toUpperCase.*
compileOnly java.lang.StringLatin1.replace.*
compileOnly java.security.ProtectionDomain.getCodeSource.*
compileOnly java.lang.invoke.MethodHandle.type.*
compileOnly java.lang.reflect.Method.getName.*
compileOnly java.lang.invoke.MethodType.checkSlotCount.*
compileOnly java.lang.invoke.MethodType.parameterType.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.String.replace.*
compileOnly java.lang.String.substring.*
compileOnly java.lang.ClassLoader.checkName.*
compileOnly java.lang.StringLatin1.lastIndexOf.*
compileOnly java.lang.String.regionMatches.*
compileOnly java.lang.String.indexOf.*
compileOnly java.security.CodeSource.getLocationNoFragString.*
compileOnly java.lang.StringLatin1.lastIndexOf.*
compileOnly java.lang.String.length.*
compileOnly java.lang.String.length.*
compileOnly sun.net.util.IPAddressUtil.checkHostString.*
compileOnly sun.net.util.IPAddressUtil.scan.*
compileOnly java.lang.StringCoding.encodeUTF8.*
compileOnly java.lang.StringCoding.encodeUTF8.*
compileOnly java.lang.String.toLowerCase.*
compileOnly java.net.URLStreamHandler.getDefaultPort.*
compileOnly java.lang.String.toString.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.lang.ref.Cleaner.register.*
compileOnly java.lang.String.startsWith.*
compileOnly java.io.UnixFileSystem.getBooleanAttributes.*
compileOnly java.lang.StringConcatHelper.stringOf.*
compileOnly java.lang.StringConcatHelper.mix.*
compileOnly java.lang.StringConcatHelper.checkOverflow.*
compileOnly java.lang.StringConcatHelper.prepend.*
compileOnly java.util.ArrayDeque.elementAt.*
compileOnly java.lang.String.startsWith.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly sun.net.www.protocol.file.Handler.parseURL.*
compileOnly java.net.URLStreamHandler.parseURL.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.lang.StringCoding.hasNegatives.*
compileOnly java.lang.StringCoding.hasNegatives.*
compileOnly java.lang.ref.Reference.reachabilityFence.*
compileOnly java.lang.ref.Reference.reachabilityFence.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.nio.Buffer.hasRemaining.*
compileOnly java.nio.Buffer.nextGetIndex.*
compileOnly java.nio.DirectByteBuffer.ix.*
compileOnly java.util.jar.JarFile.getEntry0.*
compileOnly java.util.zip.Inflater.ensureOpen.*
compileOnly java.util.WeakHashMap.maskNull.*
compileOnly java.util.WeakHashMap.hash.*
compileOnly sun.net.www.ParseUtil.encodePath.*
compileOnly java.util.LinkedHashMap.removeEldestEntry.*
compileOnly java.util.zip.ZipUtils.CENSIZ.*
compileOnly java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry.hashCode.*
compileOnly java.security.CodeSource.getLocation.*
compileOnly java.util.zip.ZipEntry.getSize.*
compileOnly java.nio.HeapByteBuffer.isDirect.*
compileOnly java.lang.invoke.MemberName.initResolved.*
compileOnly java.lang.invoke.MethodTypeForm.erasedType.*
compileOnly java.lang.invoke.MethodType.equals.*
compileOnly java.lang.invoke.MethodType$ConcurrentWeakInternSet.expungeStaleElements.*
compileOnly java.lang.invoke.MemberName.testAllFlags.*
compileOnly java.lang.Object.equals.*
compileOnly java.lang.invoke.MethodType.makeImpl.*
compileOnly java.lang.invoke.MethodType$ConcurrentWeakInternSet.get.*
compileOnly sun.invoke.util.Wrapper.basicTypeChar.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.util.LinkedHashMap.get.*
compileOnly java.util.jar.JarFile.maybeInstantiateVerifier.*
compileOnly java.lang.String.concat.*
compileOnly java.net.URLStreamHandler.setURL.*
compileOnly java.lang.StringLatin1.regionMatchesCI.*
compileOnly java.lang.ClassLoader.getClassLoadingLock.*
compileOnly java.lang.NamedPackage.module.*
compileOnly java.nio.Buffer.checkIndex.*
compileOnly java.nio.ByteBuffer.limit.*
compileOnly java.nio.DirectByteBuffer.address.*
compileOnly java.nio.DirectByteBuffer.attachment.*
compileOnly java.nio.Buffer.limit.*
compileOnly java.lang.Integer.stringSize.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.invoke.MethodHandles$Lookup.lookupClass.*
compileOnly java.nio.MappedByteBuffer.limit.*
compileOnly java.util.Optional.orElse.*
compileOnly java.nio.MappedByteBuffer.position.*
compileOnly java.lang.StringUTF16.compress.*
compileOnly java.lang.String.indexOf.*
compileOnly java.util.WeakHashMap.getTable.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.util.concurrent.ConcurrentHashMap.tabAt.*
compileOnly java.util.concurrent.ConcurrentHashMap.tabAt.*
compileOnly java.lang.AbstractStringBuilder.ensureCapacityInternal.*
compileOnly java.util.zip.ZipUtils.CENLEN.*
compileOnly java.util.WeakHashMap.indexFor.*
compileOnly java.lang.AbstractStringBuilder.ensureCapacityInternal.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.io.File.getName.*
compileOnly java.lang.Integer.getChars.*
compileOnly java.util.ImmutableCollections$List12.get.*
compileOnly java.util.ImmutableCollections$ListN.get.*
compileOnly java.util.concurrent.CopyOnWriteArrayList.setArray.*
compileOnly java.nio.DirectIntBufferU.ix.*
compileOnly java.util.jar.JarFile.getJarEntry.*
compileOnly java.util.jar.JarFile.getEntry0.*
compileOnly java.util.jar.JarFile.maybeInstantiateVerifier.*
compileOnly java.util.jar.JarFile.match.*
compileOnly java.lang.StringLatin1.indexOf.*
compileOnly java.nio.Buffer.hasRemaining.*
compileOnly java.nio.Buffer.hasRemaining.*
compileOnly java.io.UnixFileSystem.resolve.*
compileOnly java.lang.StringLatin1.canEncode.*
compileOnly java.lang.StringLatin1.canEncode.*
compileOnly java.util.jar.JarFile.getEntry0.*
compileOnly java.util.jar.Manifest$FastInputStream.readLine.*
compileOnly java.util.zip.ZipFile$1.getEntry.*
compileOnly java.util.jar.JarFile.getEntry.*
compileOnly java.lang.StringCoding.decodeUTF8.*
compileOnly java.lang.String.getBytes.*
compileOnly java.lang.String.toLowerCase.*
compileOnly java.util.Locale.getDefault.*
compileOnly java.lang.String.getBytes.*
compileOnly java.util.Arrays.copyOfRange.*
compileOnly java.util.Arrays.copyOfRange.*
compileOnly java.util.zip.ZipFile.ensureOpen.*
compileOnly java.util.jar.Attributes.getValue.*
compileOnly java.util.zip.ZipFile.ensureOpen.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.util.jar.Attributes.get.*
compileOnly sun.invoke.util.VerifyAccess.isTypeVisible.*
compileOnly java.lang.StringLatin1.toLowerCase.*
compileOnly java.util.zip.InflaterInputStream.ensureOpen.*
compileOnly java.util.jar.Manifest.getEntries.*
compileOnly java.util.jar.Manifest.getMainAttributes.*
compileOnly java.util.ArrayDeque.add.*
compileOnly java.io.File.exists.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.StringCoding.encodeUTF8.*
compileOnly java.lang.ClassLoader.loadClass.*
compileOnly java.lang.System$2.findBootstrapClassOrNull.*
compileOnly java.lang.StringCoding.encodeUTF8.*
compileOnly java.lang.StringConcatHelper.newString.*
compileOnly java.lang.reflect.Modifier.isPublic.*
compileOnly java.lang.invoke.MemberName.isStatic.*
compileOnly java.lang.invoke.MemberName.getReferenceKind.*
compileOnly java.lang.reflect.Modifier.isProtected.*
compileOnly sun.invoke.util.Wrapper.forBasicType.*
compileOnly java.util.Arrays.equals.*
compileOnly sun.invoke.util.BytecodeDescriptor.unparseSig.*
compileOnly java.util.stream.ReferencePipeline$2$1.accept.*
compileOnly java.lang.Class.getPackageName.*
compileOnly java.lang.invoke.MethodTypeForm.basicType.*
compileOnly java.lang.invoke.MemberName.getMethodOrFieldType.*
compileOnly java.lang.invoke.TypeConvertingMethodAdapter.descriptorToName.*
compileOnly java.util.zip.ZipCoder$UTF8.getBytes.*
compileOnly java.lang.ref.SoftReference.get.*
compileOnly java.util.zip.ZipCoder$UTF8.getBytes.*
compileOnly java.util.jar.JarFile.maybeInstantiateVerifier.*
compileOnly java.lang.ThreadLocal.get.*
compileOnly java.util.zip.ZipFile.ensureOpenOrZipException.*
compileOnly java.util.jar.JarFile$1.apply.*
compileOnly java.security.CodeSource.getCertificates.*
compileOnly java.util.WeakHashMap.remove.*
compileOnly java.util.Collections$SetFromMap.remove.*
compileOnly java.util.zip.ZipFile$InflaterCleanupAction.run.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.util.jar.JarFile.getManifest.*
compileOnly sun.net.util.URLUtil.urlNoFragString.*
compileOnly java.lang.StringLatin1.replace.*
compileOnly java.util.ArrayDeque.pollFirst.*
compileOnly java.nio.MappedByteBuffer.limit.*
compileOnly java.util.concurrent.ConcurrentHashMap$Traverser.advance.*
compileOnly java.nio.MappedByteBuffer.position.*
compileOnly java.nio.DirectByteBufferR.slice.*
compileOnly java.lang.String.rangeCheck.*
compileOnly java.nio.DirectLongBufferU.ix.*
compileOnly java.io.BufferedInputStream.getBufIfOpen.*
compileOnly java.io.DataInputStream.readUTF.*
compileOnly java.io.BufferedInputStream.read1.*
compileOnly java.io.DataInputStream.readUTF.*
compileOnly java.util.LinkedHashMap.newNode.*
compileOnly java.util.HashMap$Node.getValue.*
compileOnly java.util.Vector.add.*
compileOnly java.lang.StringLatin1.replace.*
compileOnly java.util.ArrayDeque.poll.*
compileOnly sun.net.www.protocol.jar.Handler.parseURL.*
compileOnly sun.net.www.protocol.jar.Handler.parseContextSpec.*
compileOnly java.lang.String.equalsIgnoreCase.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.util.ArrayDeque.addLast.*
compileOnly sun.net.www.ParseUtil.canonizeString.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.lang.String.substring.*
compileOnly java.lang.String.substring.*
compileOnly java.lang.String.checkBoundsBeginEnd.*
compileOnly java.util.zip.ZipUtils.CENTIM.*
compileOnly java.util.zip.ZipUtils.CENCRC.*
compileOnly java.lang.String.checkBoundsBeginEnd.*
compileOnly java.lang.Math.min.*
compileOnly java.lang.Math.min.*
compileOnly java.util.concurrent.ConcurrentHashMap.casTabAt.*
compileOnly java.util.concurrent.ConcurrentHashMap.casTabAt.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.zip.ZipFile$ZipFileInputStream.initDataOffset.*
compileOnly java.util.Collections$SetFromMap.add.*
compileOnly java.util.WeakHashMap.put.*
compileOnly java.util.zip.ZipUtils.CENOFF.*
compileOnly java.util.zip.ZipFile$ZipFileInflaterInputStream.fill.*
compileOnly java.lang.ClassLoader.definePackage.*
compileOnly java.lang.Package.isSealed.*
compileOnly java.util.HashMap.get.*
compileOnly java.lang.ClassLoader.compareCerts.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.lang.CharacterDataLatin1.toLowerCase.*
compileOnly java.lang.CharacterDataLatin1.toLowerCase.*
compileOnly java.util.jar.JarFile.getManifestFromReference.*
compileOnly sun.net.www.ParseUtil.firstEncodeIndex.*
compileOnly sun.net.www.ParseUtil.firstEncodeIndex.*
compileOnly java.util.zip.ZipFile.getZipEntry.*
compileOnly java.util.HashMap$Node.getKey.*
compileOnly sun.net.www.protocol.jar.Handler.indexOfBangSlash.*
compileOnly java.net.URLStreamHandler.setURL.*
compileOnly java.io.UnixFileSystem.normalize.*
compileOnly java.net.URL.toString.*
compileOnly java.net.URL.toExternalForm.*
compileOnly java.lang.Thread.interrupted.*
compileOnly java.util.jar.JavaUtilJarAccessImpl.getTrustedAttributes.*
compileOnly java.security.SecureClassLoader$CodeSourceKey.equals.*
compileOnly java.security.CodeSource.matchCerts.*
compileOnly java.io.UnixFileSystem.normalize.*
compileOnly java.lang.StringLatin1.charAt.*
compileOnly java.lang.StringLatin1.charAt.*
compileOnly java.util.Arrays.copyOf.*
compileOnly java.util.Arrays.copyOf.*
compileOnly sun.net.www.ParseUtil.match.*
compileOnly sun.util.locale.BaseLocale.getLanguage.*
compileOnly sun.util.locale.LocaleUtils.isUpper.*
compileOnly java.lang.invoke.MemberName.isResolved.*
compileOnly java.lang.String.indexOf.*
compileOnly java.util.StringTokenizer.scanToken.*
compileOnly java.util.StringTokenizer.skipDelimiters.*
compileOnly java.util.StringTokenizer.hasMoreTokens.*
compileOnly java.util.StringTokenizer.nextToken.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.String.isLatin1.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.StringUTF16.getChar.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.StringUTF16.getChar.*
compileOnly java.lang.StringUTF16.getChar.*
compileOnly java.lang.reflect.Method.getModifiers.*
compileOnly sun.invoke.util.VerifyAccess.isClassAccessible.*
compileOnly sun.invoke.util.VerifyAccess.getClassModifiers.*
compileOnly java.lang.invoke.MemberName.isConstructor.*
compileOnly java.util.HashMap.resize.*
compileOnly java.lang.reflect.Method.getReturnType.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.lang.Integer.shortValue.*
compileOnly java.io.ByteArrayOutputStream.ensureCapacity.*
compileOnly java.io.DataOutputStream.incCount.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.getUtf8.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.getValue.*
compileOnly java.io.DataOutputStream.writeShort.*
compileOnly java.io.DataOutputStream.writeByte.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$IndirectEntry.hashCode.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.getIndirect.*
compileOnly java.util.ArrayList$Itr.hasNext.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$IndirectEntry.equals.*
compileOnly java.lang.reflect.Modifier.isStatic.*
compileOnly java.util.LinkedHashMap.afterNodeInsertion.*
compileOnly sun.reflect.generics.parser.SignatureParser.current.*
compileOnly java.util.ArrayList$Itr.next.*
compileOnly java.util.ArrayList$Itr.checkForComodification.*
compileOnly sun.reflect.generics.parser.SignatureParser.advance.*
compileOnly java.lang.Character.isWhitespace.*
compileOnly java.lang.Character.isWhitespace.*
compileOnly java.lang.CharacterDataLatin1.isWhitespace.*
compileOnly java.util.LinkedHashMap$LinkedHashIterator.hasNext.*
compileOnly java.lang.Class.getClassLoader.*
compileOnly sun.reflect.generics.parser.SignatureParser.skipIdentifier.*
compileOnly java.nio.Buffer.nextGetIndex.*
compileOnly java.nio.HeapByteBuffer.byteOffset.*
compileOnly java.nio.HeapByteBuffer.getShort.*
compileOnly java.lang.Class.getAnnotationType.*
compileOnly java.io.DataInputStream.readFully.*
compileOnly java.util.HashMap.resize.*
compileOnly java.lang.StringUTF16.compress.*
compileOnly java.io.DataInputStream.readUnsignedShort.*
compileOnly java.io.DataInputStream.readShort.*
compileOnly java.io.DataInputStream.readFully.*
compileOnly java.io.DataInputStream.readByte.*
compileOnly java.util.zip.Checksum.update.*
compileOnly java.util.zip.CRC32.updateBytes.*
compileOnly java.util.zip.CRC32.updateBytesCheck.*
compileOnly java.util.zip.CRC32.update.*
compileOnly sun.util.calendar.ZoneInfoFile$Checksum.update.*
compileOnly java.lang.invoke.MethodType.checkPtypes.*
compileOnly java.lang.StringUTF16.compress.*
compileOnly java.util.HashMap.put.*
compileOnly sun.util.locale.StringTokenIterator.isDone.*
compileOnly sun.util.locale.LocaleUtils.toLower.*
compileOnly java.util.Collections$EmptyList.isEmpty.*
compileOnly sun.util.locale.BaseLocale.getVariant.*
compileOnly sun.util.locale.BaseLocale.getRegion.*
compileOnly java.util.Collections.emptyList.*
compileOnly sun.util.locale.BaseLocale.getScript.*
compileOnly sun.util.locale.StringTokenIterator.current.*
compileOnly sun.util.locale.LocaleUtils.isAlpha.*
compileOnly sun.util.locale.BaseLocale$Key.hashCode.*
compileOnly sun.util.locale.LocaleUtils.toLowerString.*
compileOnly sun.util.locale.BaseLocale.hashCode.*
compileOnly sun.util.locale.StringTokenIterator.currentEnd.*
compileOnly sun.util.locale.ParseStatus.isError.*
compileOnly sun.util.locale.LanguageTag.getLanguage.*
compileOnly sun.util.locale.LanguageTag.getScript.*
compileOnly sun.util.locale.LanguageTag.getRegion.*
compileOnly sun.util.locale.LanguageTag.getPrivateuse.*
compileOnly sun.util.locale.BaseLocale.getInstance.*
compileOnly sun.util.locale.LocaleUtils.isLower.*
compileOnly sun.util.locale.InternalLocaleBuilder.clearExtensions.*
compileOnly sun.util.locale.LocaleUtils.isEmpty.*
compileOnly sun.util.locale.LocaleUtils.isAlphaString.*
compileOnly sun.util.locale.StringTokenIterator.nextDelimiter.*
compileOnly sun.util.locale.LocaleUtils.toUpperString.*
compileOnly sun.util.locale.BaseLocale$Key.hashCode.*
compileOnly sun.util.locale.LocaleObjectCache.cleanStaleEntries.*
compileOnly sun.util.locale.LocaleObjectCache.get.*
compileOnly sun.util.locale.BaseLocale$Key.normalize.*
compileOnly sun.util.locale.StringTokenIterator.next.*
compileOnly sun.util.locale.StringTokenIterator.hasNext.*
compileOnly sun.util.locale.LanguageTag.getExtensions.*
compileOnly java.util.Locale.getInstance.*
compileOnly java.util.Locale.equals.*
compileOnly java.util.Locale.hasExtensions.*
compileOnly sun.util.locale.BaseLocale.equals.*
compileOnly java.util.Locale.stripExtensions.*
compileOnly sun.util.locale.LocaleObjectCache.normalizeKey.*
compileOnly sun.util.locale.BaseLocale$Key.getBaseLocale.*
compileOnly sun.util.locale.LanguageTag.isLanguage.*
compileOnly sun.util.locale.LanguageTag.getVariants.*
compileOnly java.security.SecureClassLoader.getProtectionDomain.*
compileOnly java.lang.ClassLoader.defineClass.*
compileOnly java.nio.HeapByteBuffer.ix.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.addEntry.*
compileOnly java.io.DataOutputStream.writeUTF.*
compileOnly java.util.HashMap.put.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.getClass.*
compileOnly java.util.Collections.emptyList.*
compileOnly java.util.Collections.emptyList.*
compileOnly java.util.concurrent.ConcurrentHashMap.setTabAt.*
compileOnly java.util.jar.Manifest$FastInputStream.readLine.*
compileOnly java.util.jar.Manifest$FastInputStream.peek.*
compileOnly java.util.concurrent.ConcurrentHashMap.setTabAt.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.CharacterData.of.*
compileOnly java.lang.ThreadLocal.get.*
compileOnly java.lang.ClassLoader.addClass.*
compileOnly java.security.SecureClassLoader$CodeSourceKey.hashCode.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.Class.reflectionData.*
compileOnly java.util.concurrent.ConcurrentHashMap$BaseIterator.hasNext.*
compileOnly java.nio.MappedByteBuffer.limit.*
compileOnly java.nio.MappedByteBuffer.position.*
compileOnly java.util.Optional.empty.*
compileOnly java.util.concurrent.ConcurrentHashMap$ValueIterator.next.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.util.concurrent.ConcurrentHashMap.get.*
compileOnly java.nio.MappedByteBuffer.rewind.*
compileOnly java.nio.MappedByteBuffer.rewind.*
compileOnly java.nio.ByteBuffer.rewind.*
compileOnly java.nio.Buffer.rewind.*
compileOnly java.util.concurrent.CopyOnWriteArrayList.getArray.*
compileOnly java.lang.ClassLoader.getNamedPackage.*
compileOnly java.util.Properties.getProperty.*
compileOnly java.util.jar.JarFile.getVersionedEntry.*
compileOnly java.util.concurrent.ConcurrentHashMap.get.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.lang.Module.isNamed.*
compileOnly java.net.URLStreamHandler.toExternalForm.*
compileOnly java.lang.String.lastIndexOf.*
compileOnly java.lang.String.isEmpty.*
compileOnly java.util.jar.JavaUtilJarAccessImpl.ensureInitialization.*
compileOnly java.lang.String.isEmpty.*
compileOnly java.lang.StringBuilder.toString.*
compileOnly java.util.jar.Manifest.getAttributes.*
compileOnly java.lang.StringBuilder.toString.*
compileOnly java.lang.reflect.ReflectAccess.copyMethod.*
compileOnly java.lang.invoke.MethodTypeForm.canonicalizeAll.*
compileOnly java.lang.invoke.MemberName.flagsMods.*
compileOnly sun.invoke.util.BytecodeDescriptor.unparse.*
compileOnly java.util.Arrays.copyOf.*
compileOnly java.lang.invoke.LambdaForm$BasicType.basicType.*
compileOnly java.lang.invoke.LambdaForm.argument.*
compileOnly java.lang.invoke.MethodTypeForm.canonicalize.*
compileOnly java.lang.invoke.MethodType.erase.*
compileOnly java.lang.ClassLoader.checkPackageAccess.*
compileOnly java.lang.System.checkKey.*
compileOnly java.lang.invoke.MemberName.getType.*
compileOnly java.lang.invoke.LambdaForm.forceInterpretation.*
compileOnly java.lang.invoke.BootstrapMethodInvoker.maybeReBox.*
compileOnly java.lang.invoke.MemberName.getName.*
compileOnly java.util.WeakHashMap.getTable.*
compileOnly java.util.WeakHashMap.remove.*
compileOnly java.util.WeakHashMap.put.*
compileOnly java.util.HashSet.contains.*
compileOnly java.util.WeakHashMap.getTable.*
compileOnly java.lang.String.isLatin1.*
compileOnly sun.reflect.generics.parser.SignatureParser.current.*
compileOnly sun.reflect.generics.parser.SignatureParser.current.*
compileOnly java.lang.invoke.LambdaForm$Name.initIndex.*
compileOnly sun.invoke.util.Wrapper.hashPrim.*
compileOnly sun.invoke.util.Wrapper.findPrimitiveType.*
compileOnly sun.invoke.util.Wrapper.forPrimitiveType.*
compileOnly java.lang.invoke.MethodType.parameterType.*
compileOnly java.lang.invoke.LambdaForm.internArgument.*
compileOnly java.lang.invoke.MethodType.parameterType.*
compileOnly java.lang.invoke.MethodHandles$Lookup.lookupClassOrNull.*
compileOnly java.lang.invoke.MemberName.getInvocationType.*
compileOnly java.lang.invoke.MethodType.parameterSlotCount.*
compileOnly java.lang.invoke.LambdaForm$Name.index.*
compileOnly java.util.Arrays.copyOf.*
compileOnly java.lang.invoke.MethodType.parameterCount.*
compileOnly java.lang.invoke.MethodType.parameterCount.*
compileOnly java.lang.invoke.MemberName$Factory.resolveOrFail.*
compileOnly java.lang.invoke.LambdaForm$BasicType.basicTypeClass.*
compileOnly java.lang.reflect.Method.getDeclaringClass.*
compileOnly java.lang.StringLatin1.getChar.*
compileOnly java.util.LinkedHashMap$LinkedHashIterator.nextNode.*
compileOnly java.lang.String.coder.*
compileOnly java.lang.StringLatin1.compareToCI.*
compileOnly java.lang.String.coder.*
compileOnly java.lang.invoke.LambdaForm$NamedFunction.methodType.*
compileOnly java.lang.invoke.MemberName.init.*
compileOnly java.util.LinkedHashMap$LinkedEntryIterator.next.*
compileOnly java.util.WeakHashMap.put.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.LinkedHashMap$LinkedEntryIterator.next.*
compileOnly java.lang.reflect.Method.getSharedParameterTypes.*
compileOnly java.util.Arrays.hashCode.*
compileOnly java.lang.reflect.Method.getParameterTypes.*
compileOnly java.util.HashMap.put.*
compileOnly java.lang.PublicMethods$Key.hashCode.*
compileOnly java.lang.StringLatin1.compareTo.*
compileOnly java.lang.StringConcatHelper.initialCoder.*
compileOnly java.lang.String.compareTo.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.put.*
compileOnly java.lang.StringConcatHelper.simpleConcat.*
compileOnly java.lang.StringLatin1.compareTo.*
compileOnly java.util.WeakHashMap.eq.*
compileOnly com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder.compare.*
compileOnly java.util.TreeMap.parentOf.*
compileOnly java.lang.reflect.Method.getGenericSignature.*
compileOnly java.util.TreeMap.size.*
compileOnly java.lang.reflect.Method.copy.*
compileOnly java.util.TreeMap$PrivateEntryIterator.hasNext.*
compileOnly java.util.TreeMap$Entry.getKey.*
compileOnly java.util.TreeMap$Entry.getValue.*
compileOnly java.lang.invoke.MethodType$ConcurrentWeakInternSet.add.*
compileOnly sun.invoke.util.Wrapper.isDoubleWord.*
compileOnly java.lang.invoke.LambdaForm$Name.type.*
compileOnly java.lang.reflect.Method.getRoot.*
compileOnly java.util.TreeMap.put.*
compileOnly java.util.TreeMap.successor.*
compileOnly java.lang.String$CaseInsensitiveComparator.compare.*
compileOnly java.lang.String$CaseInsensitiveComparator.compare.*
compileOnly java.util.TreeMap$PrivateEntryIterator.nextEntry.*
compileOnly com.sun.jmx.mbeanserver.MXBeanMapping.getOpenType.*
compileOnly java.lang.invoke.LambdaForm.uncustomize.*
compileOnly java.lang.invoke.DirectMethodHandle.internalMemberName.*
compileOnly java.util.ArrayList.iterator.*
compileOnly java.lang.invoke.LambdaForm.parameter.*
compileOnly java.lang.invoke.LambdaForm$Name.useCount.*
compileOnly java.lang.invoke.LambdaForm$Name.isParam.*
compileOnly java.util.ImmutableCollections$ListN.size.*
compileOnly java.lang.invoke.InvokerBytecodeGenerator.emitPushArgument.*
compileOnly java.lang.invoke.LambdaForm.parameterType.*
compileOnly java.lang.invoke.MethodType.insertParameterTypes.*
compileOnly java.lang.invoke.LambdaForm$Name.lastUseIndex.*
compileOnly java.lang.invoke.DirectMethodHandle.internalMemberName.*
compileOnly java.lang.invoke.LambdaForm$NamedFunction.intrinsicName.*
compileOnly java.lang.invoke.MethodHandleNatives.refKindIsField.*
compileOnly java.util.ArrayList.grow.*
compileOnly java.lang.PublicMethods$MethodList.length.*
compileOnly java.lang.PublicMethods$MethodList.merge.*
compileOnly java.util.TreeMap.getFirstEntry.*
compileOnly java.lang.PublicMethods.merge.*
compileOnly com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder.compare.*
compileOnly java.util.TreeMap.fixAfterInsertion.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.Objects.checkFromIndexSize.*
compileOnly java.lang.invoke.LambdaForm.prepare.*
compileOnly java.lang.System.getProperty.*
compileOnly java.lang.String.hashCode.*
compileOnly java.lang.invoke.MethodType.toMethodDescriptorString.*
compileOnly java.lang.String.hashCode.*
compileOnly java.util.concurrent.locks.AbstractQueuedSynchronizer.getState.*
compileOnly java.util.IdentityHashMap.maskNull.*
compileOnly java.util.TreeMap.getEntry.*
compileOnly java.util.TreeMap.containsKey.*
compileOnly java.util.LinkedHashMap$LinkedValueIterator.next.*
compileOnly java.util.TreeMap$KeyIterator.next.*
compileOnly java.util.TreeMap$ValueIterator.next.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.util.HashMap.getNode.*
compileOnly java.util.HashMap.hash.*
compileOnly java.util.AbstractCollection.toArray.*
compileOnly java.util.HashMap.hash.*
compileOnly java.lang.String.toString.*
compileOnly java.util.TreeMap.getEntryUsingComparator.*
compileOnly java.lang.String.toString.*
compileOnly java.lang.CharacterDataLatin1.toUpperCase.*
compileOnly java.util.HashMap$EntryIterator.next.*
compileOnly java.util.HashMap$EntryIterator.next.*
compileOnly java.lang.CharacterDataLatin1.toUpperCase.*
compileOnly java.lang.StringLatin1.compareToCI.*
compileOnly java.util.TreeMap.navigableKeySet.*
compileOnly java.lang.Boolean.valueOf.*
compileOnly com.sun.management.internal.DiagnosticCommandArgumentInfo.getName.*
compileOnly com.sun.management.internal.DiagnosticCommandInfo.getArgumentsInfo.*
compileOnly java.lang.Class.getInterfaces.*
compileOnly java.lang.String.trim.*
compileOnly java.lang.StringLatin1.trim.*
compileOnly java.util.TreeMap$EntryIterator.next.*
compileOnly java.util.TreeMap$EntryIterator.next.*
compileOnly java.util.Objects.hashCode.*
compileOnly sun.reflect.generics.visitor.Reifier.getFactory.*
compileOnly java.lang.invoke.MethodHandles$Lookup.checkSymbolicClass.*
compileOnly java.lang.StringLatin1.compareToCI.*
compileOnly sun.reflect.generics.parser.SignatureParser.advance.*
compileOnly java.util.IdentityHashMap.containsKey.*
compileOnly sun.reflect.generics.parser.SignatureParser.advance.*
compileOnly java.lang.String$CaseInsensitiveComparator.compare.*
compileOnly java.util.Arrays.binarySearch0.*
compileOnly java.lang.String.compareTo.*
compileOnly sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments.*
compileOnly java.lang.reflect.Method.hashCode.*
compileOnly sun.reflect.generics.tree.ClassTypeSignature.getPath.*
compileOnly sun.reflect.generics.tree.SimpleClassTypeSignature.getName.*
compileOnly sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar.*
compileOnly java.lang.reflect.Method.getGenericReturnType.*
compileOnly java.util.IdentityHashMap.hash.*
compileOnly com.sun.jmx.mbeanserver.MXBeanIntrospector.originalTypeString.*
compileOnly java.util.TreeMap$KeySet.iterator.*
compileOnly java.util.TreeMap.keyIterator.*
compileOnly java.util.TreeMap$KeySet.size.*
compileOnly java.lang.reflect.Method.getAnnotationBytes.*
compileOnly java.lang.invoke.InfoFromMemberName.getReferenceKind.*
compileOnly java.lang.reflect.Modifier.isFinal.*
compileOnly java.lang.StringLatin1.inflate.*
compileOnly java.util.regex.Pattern$BmpCharProperty.match.*
compileOnly java.util.regex.Pattern.lambda$Single$7.*
compileOnly java.util.Formatter$Flags.valueOf.*
compileOnly java.lang.String$CaseInsensitiveComparator.compare.*
compileOnly java.lang.ClassLoader.getDefinedPackage.*
compileOnly sun.invoke.util.Wrapper.isSubwordOrInt.*
compileOnly java.lang.StringLatin1.hashCode.*
compileOnly sun.invoke.util.Wrapper.isIntegral.*
compileOnly java.util.jar.Manifest.getTrustedAttributes.*
compileOnly java.util.WeakHashMap.get.*
compileOnly java.lang.StringLatin1.hashCode.*
compileOnly java.util.WeakHashMap.indexFor.*
compileOnly java.util.WeakHashMap.indexFor.*
compileOnly java.lang.Class.getReflectionFactory.*
compileOnly java.util.Collections.emptySet.*
compileOnly java.lang.Class.cast.*
compileOnly java.util.stream.Sink$ChainedReference.cancellationRequested.*
compileOnly java.util.LinkedHashMap.get.*
compileOnly java.util.LinkedHashMap.newNode.*
compileOnly java.util.LinkedHashMap.afterNodeInsertion.*
compileOnly java.util.HashMap.put.*
compileOnly java.lang.Class.newReflectionData.*
compileOnly java.util.WeakHashMap.remove.*
compileOnly java.lang.String.replace.*
compileOnly sun.invoke.util.VerifyAccess.isSamePackage.*
compileOnly java.lang.invoke.LambdaForm$NamedFunction.returnType.*
compileOnly java.lang.invoke.MethodType.basicType.*
compileOnly java.lang.invoke.InnerClassLambdaMetafactory.getOpcodeOffset.*
compileOnly java.lang.invoke.MethodHandleNatives.refKindHasReceiver.*
compileOnly java.lang.invoke.MemberName.isCallerSensitive.*
compileOnly java.lang.reflect.Constructor.getDeclaringClass.*
compileOnly java.lang.invoke.AbstractValidatingLambdaMetafactory.isAdaptableTo.*
compileOnly java.lang.invoke.MethodHandleNatives.refKindIsMethod.*
compileOnly java.util.concurrent.locks.AbstractQueuedSynchronizer.setState.*
compileOnly java.util.concurrent.atomic.AtomicLong.get.*
compileOnly java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread.*
compileOnly java.lang.invoke.MethodHandleNatives.findMethodHandleType.*
compileOnly java.util.concurrent.atomic.AtomicReference.get.*
compileOnly java.lang.invoke.MethodHandles$Lookup.in.*
compileOnly java.lang.String.replace.*
compileOnly java.lang.invoke.MemberName.getModifiers.*
compileOnly java.lang.invoke.TypeConvertingMethodAdapter.cast.*
compileOnly java.lang.invoke.MethodTypeForm.unpack.*
compileOnly java.lang.invoke.MethodHandleImpl.isCompileConstant.*
compileOnly java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread.*
compileOnly java.lang.invoke.TypeConvertingMethodAdapter.convertType.*
compileOnly java.lang.invoke.VarForm.getMemberName.*
compileOnly java.lang.invoke.MethodHandles$Lookup.checkSecurityManager.*
compileOnly java.lang.invoke.MethodTypeForm.cachedLambdaForm.*
compileOnly java.util.concurrent.atomic.AtomicLong.lazySet.*
compileOnly java.lang.invoke.MemberName.checkForTypeAlias.*
compileOnly java.lang.invoke.MethodHandleNatives.isPullModeBSM.*
compileOnly java.lang.reflect.Constructor.getRoot.*
compileOnly java.lang.reflect.Constructor.getConstructorAccessor.*
compileOnly java.lang.invoke.InnerClassLambdaMetafactory.getLoadOpcode.*
compileOnly java.lang.invoke.InnerClassLambdaMetafactory.getParameterSize.*
compileOnly java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet.*
compileOnly java.util.LinkedHashMap.get.*
compileOnly java.lang.StackStreamFactory$FrameBuffer.isEmpty.*
compileOnly java.util.RegularEnumSet.contains.*
compileOnly java.lang.StackWalker.hasOption.*
compileOnly java.lang.ClassLoader.preDefineClass.*
compileOnly java.lang.ClassLoader.postDefineClass.*
compileOnly java.lang.invoke.DirectMethodHandle.preparedLambdaForm.*
compileOnly java.lang.String.hashCode.*
compileOnly java.lang.invoke.MemberName.isMethod.*
compileOnly java.util.regex.Pattern.has.*
compileOnly java.lang.Float.isNaN.*
compileOnly java.lang.invoke.DirectMethodHandle.preparedLambdaForm.*
compileOnly java.lang.String.hashCode.*
compileOnly java.lang.Class.getName.*
compileOnly java.lang.Class.getName.*
compileOnly java.lang.invoke.MemberName.getReferenceKind.*
compileOnly java.lang.invoke.MemberName.getReferenceKind.*
compileOnly java.lang.StackFrameInfo.declaringClass.*
compileOnly java.lang.invoke.MethodHandleImpl$1.getDeclaringClass.*
compileOnly java.nio.Buffer.position.*
compileOnly java.nio.Buffer.position.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.nio.ByteBuffer.position.*
compileOnly java.lang.StringLatin1.toUpperCase.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.Character.toUpperCaseEx.*
compileOnly java.lang.Character.toUpperCaseEx.*
compileOnly java.lang.CharacterDataLatin1.toUpperCaseEx.*
compileOnly java.lang.CharacterDataLatin1.toUpperCaseEx.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.util.Objects.requireNonNull.*
compileOnly java.lang.StackStreamFactory$FrameBuffer.isActive.*
compileOnly java.lang.StackStreamFactory$StackFrameTraverser$StackFrameBuffer.at.*
compileOnly java.util.stream.AbstractPipeline.isParallel.*
compileOnly java.lang.StackStreamFactory$AbstractStackWalker.hasNext.*
compileOnly java.lang.StackStreamFactory$FrameBuffer.getIndex.*
compileOnly java.util.LinkedHashMap.newNode.*
compileOnly java.util.LinkedHashMap.linkNodeLast.*
compileOnly java.lang.String.checkIndex.*
compileOnly java.util.regex.Pattern.peek.*
compileOnly java.lang.String.codePointAt.*
compileOnly java.util.regex.Pattern.isSupplementary.*
compileOnly java.lang.Character.charCount.*
compileOnly java.util.HashMap.hash.*
compileOnly java.lang.Integer.numberOfLeadingZeros.*
compileOnly java.util.regex.Pattern.next.*
compileOnly java.nio.ByteBuffer.arrayOffset.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.StringBuilder.toString.*
compileOnly java.lang.StringLatin1.canEncode.*
compileOnly java.lang.StringLatin1.canEncode.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.util.ArrayList.isEmpty.*
compileOnly java.util.HashMap.isEmpty.*
compileOnly java.lang.StringBuilder.toString.*
compileOnly java.lang.invoke.MethodHandles$Lookup.fixmods.*
compileOnly sun.invoke.util.VerifyAccess.isMemberAccessible.*
compileOnly java.lang.Module.allows.*
compileOnly java.lang.invoke.ConstantCallSite.getTarget.*
compileOnly java.lang.invoke.MethodHandles$Lookup.checkAccess.*
compileOnly java.util.HashMap.hash.*
compileOnly java.util.LinkedHashMap.afterNodeInsertion.*
compileOnly java.lang.Character.isLowerCase.*
compileOnly java.lang.CharacterDataLatin1.isLowerCase.*
compileOnly java.util.regex.Pattern$BitClass.is.*
compileOnly java.lang.Character.isLowerCase.*
compileOnly java.lang.invoke.Invokers$Holder.linkToTargetMethod.*
compileOnly java.util.Collections$1.hasNext.*
compileOnly java.util.stream.AbstractPipeline.getStreamAndOpFlags.*
compileOnly java.util.concurrent.ConcurrentHashMap.put.*
compileOnly java.util.stream.WhileOps$1Op$1OpSink.accept.*
compileOnly java.lang.invoke.MethodHandleImpl$1.newMemberName.*
compileOnly java.util.jar.Attributes.putValue.*
compileOnly java.util.jar.Attributes$Name.of.*
compileOnly java.lang.invoke.DirectMethodHandle.preparedLambdaForm.*
compileOnly java.nio.CharBuffer.arrayOffset.*
compileOnly java.lang.invoke.Invokers$Holder.linkToTargetMethod.*
compileOnly java.util.HashMap.tableSizeFor.*
compileOnly java.nio.CharBuffer.position.*
compileOnly java.lang.Class.forName.*
compileOnly java.lang.invoke.DirectMethodHandle$Holder.invokeStatic.*
compileOnly java.util.Optional.isPresent.*
compileOnly java.util.Collections.emptyMap.*
compileOnly java.lang.Class.privateGetDeclaredConstructors.*
compileOnly java.lang.reflect.Constructor.setConstructorAccessor.*
compileOnly java.lang.ClassLoader.getUnnamedModule.*
compileOnly java.lang.reflect.Constructor.getSharedParameterTypes.*
compileOnly java.lang.reflect.ReflectAccess.copyConstructor.*
compileOnly java.nio.CharBuffer.position.*
compileOnly java.lang.reflect.ReflectAccess.getExecutableSharedParameterTypes.*
compileOnly java.util.concurrent.ConcurrentHashMap.tableSizeFor.*
compileOnly java.lang.reflect.Constructor.newInstanceWithCaller.*
compileOnly java.security.AccessController.executePrivileged.*
compileOnly java.lang.reflect.ReflectAccess.getRoot.*
compileOnly java.io.BufferedReader.readLine.*
compileOnly java.security.AccessController.doPrivileged.*
compileOnly java.lang.reflect.Modifier.isAbstract.*
compileOnly java.lang.reflect.Constructor.getRoot.*
compileOnly java.lang.reflect.AccessibleObject.checkPermission.*
compileOnly java.lang.reflect.AccessibleObject.checkCanSetAccessible.*
compileOnly java.util.stream.ReferencePipeline$3$1.accept.*
compileOnly java.util.Collections.singletonMap.*
compileOnly java.lang.reflect.Constructor.setAccessible.*
compileOnly java.lang.reflect.Constructor.checkCanSetAccessible.*
compileOnly java.lang.Integer.hashCode.*
compileOnly java.lang.Integer.hashCode.*
compileOnly java.util.HashMap.put.*
compileOnly java.lang.reflect.AccessibleObject.verifyAccess.*
compileOnly java.lang.reflect.AccessibleObject.isAccessChecked.*
compileOnly java.util.Collections$SingletonMap.isEmpty.*
compileOnly java.lang.Integer.equals.*
compileOnly java.lang.reflect.AccessibleObject.logIfExportedForIllegalAccess.*
compileOnly java.lang.Class.arrayContentsEq.*
compileOnly java.util.concurrent.ConcurrentHashMap.containsKey.*
compileOnly java.lang.Class.getConstructor0.*
compileOnly java.lang.reflect.Constructor.copy.*
compileOnly java.lang.reflect.Constructor.acquireConstructorAccessor.*
compileOnly java.lang.reflect.AccessibleObject.checkAccess.*
compileOnly java.util.stream.ReferencePipeline$StatelessOp.opIsStateful.*
compileOnly java.util.jar.Attributes$Name.hash.*
compileOnly java.util.Optional.of.*
compileOnly java.lang.reflect.ReflectAccess.newInstance.*
compileOnly java.lang.reflect.AccessibleObject.checkCanSetAccessible.*
compileOnly java.lang.invoke.VarHandleGuards.guard_LL_V.*
compileOnly java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.set.*
compileOnly java.lang.PublicMethods$Key.matches.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$ValueEntry.write.*
compileOnly sun.invoke.util.BytecodeDescriptor.unparseMethod.*
compileOnly java.io.DataOutputStream.writeUTF.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool.getNameAndType.*
compileOnly java.lang.Class.annotationData.*
compileOnly java.util.HashMap$EntrySet.iterator.*
compileOnly sun.reflect.annotation.AnnotationInvocationHandler.invoke.*
compileOnly java.lang.Class.getAnnotation.*
compileOnly java.util.Collections.eq.*
compileOnly java.lang.Boolean.booleanValue.*
compileOnly java.util.Collections$SingletonMap.containsKey.*
compileOnly java.lang.StackStreamFactory$AbstractStackWalker.checkState.*
compileOnly java.lang.reflect.ProxyGenerator.codeLocalLoadStore.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$IndirectEntry.write.*
compileOnly sun.reflect.annotation.AnnotationType.getInstance.*
compileOnly sun.reflect.annotation.AnnotationType.memberTypes.*
compileOnly sun.reflect.annotation.AnnotationType.memberDefaults.*
compileOnly sun.reflect.annotation.AnnotationType.retention.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.String.startsWith.*
compileOnly java.lang.String.startsWith.*
compileOnly java.lang.CharacterDataLatin1.getProperties.*
compileOnly java.lang.CharacterDataLatin1.getProperties.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$IndirectEntry.hashCode.*
compileOnly java.lang.reflect.ProxyGenerator$ConstantPool$IndirectEntry.hashCode.*
compileOnly java.lang.String.endsWith.*
compileOnly java.lang.String.endsWith.*
compileOnly java.lang.String.regionMatches.*
compileOnly java.lang.String.regionMatches.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.String.indexOf.*
compileOnly java.lang.ThreadLocal.getMap.*
compileOnly java.lang.ThreadLocal.getMap.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.util.zip.ZipFile$Source.getEntryPos.*
compileOnly java.util.Optional.empty.*
compileOnly java.util.Optional.empty.*
compileOnly java.util.concurrent.ConcurrentHashMap.addCount.*
compileOnly java.util.concurrent.ConcurrentHashMap.addCount.*
compileOnly sun.net.util.IPAddressUtil.checkHostString.*
compileOnly sun.net.util.IPAddressUtil.checkHostString.*
compileOnly sun.net.util.IPAddressUtil.scan.*
compileOnly sun.net.util.IPAddressUtil.scan.*
compileOnly java.net.URLStreamHandler.setURL.*
compileOnly java.net.URLStreamHandler.setURL.*
compileOnly java.lang.StackStreamFactory$FrameBuffer.get.*
compileOnly java.lang.StackStreamFactory$AbstractStackWalker.skipReflectionFrames.*
compileOnly java.lang.StackStreamFactory.isReflectionFrame.*
compileOnly sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature.*
compileOnly sun.reflect.generics.parser.SignatureParser.mark.*
compileOnly sun.reflect.generics.parser.SignatureParser.markToCurrent.*
compileOnly sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature.*
compileOnly sun.invoke.util.VerifyAccess.isTypeVisible.*
compileOnly java.lang.invoke.MethodHandle.internalForm.*
compileOnly java.lang.invoke.MethodHandleImpl$IntrinsicMethodHandle.getTarget.*
compileOnly java.util.stream.ReduceOps$3ReducingSink.accept.*
compileOnly java.util.Collections$SingletonMap.size.*
compileOnly java.lang.invoke.VarHandleGuards.guard_LLL_Z.*
compileOnly java.util.stream.Sink$ChainedReference.end.*
compileOnly java.lang.invoke.DirectMethodHandle$Holder.invokeStatic.*
compileOnly java.util.Objects.hash.*
compileOnly java.util.stream.StreamOpFlag.isKnown.*
compileOnly java.util.Spliterator.getExactSizeIfKnown.*
compileOnly java.util.concurrent.ConcurrentHashMap$MapEntry.getKey.*
compileOnly java.util.concurrent.ConcurrentHashMap$MapEntry.getValue.*
compileOnly sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature.*
compileOnly sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature.*
compileOnly sun.reflect.generics.tree.ClassTypeSignature.accept.*
compileOnly sun.reflect.generics.visitor.Reifier.visitClassTypeSignature.*
compileOnly java.lang.reflect.ProxyGenerator.code_aload.*
compileOnly java.util.Spliterators$EmptySpliterator.characteristics.*
compileOnly java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.setRelease.*
compileOnly java.util.concurrent.ConcurrentHashMap$EntryIterator.next.*
compileOnly java.util.stream.StreamSupport.stream.*
compileOnly java.util.stream.AbstractPipeline.sourceSpliterator.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.concurrent.atomic.AtomicReference.lazySet.*
compileOnly java.lang.Thread.getId.*
compileOnly java.lang.invoke.DirectMethodHandle.make.*
compileOnly java.lang.invoke.MemberName.isField.*
compileOnly java.util.HashMap.get.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.util.ArrayList$ArrayListSpliterator.characteristics.*
compileOnly java.util.Collections$SingletonMap.get.*
compileOnly java.util.concurrent.ConcurrentLinkedQueue.updateHead.*
compileOnly java.lang.invoke.Invokers.checkCustomized.*
compileOnly java.util.HashMap.putVal.*
compileOnly java.lang.ClassLoader.checkName.*
compileOnly java.lang.ClassLoader.checkName.*
compileOnly java.net.URLStreamHandler.parseURL.*
compileOnly java.lang.invoke.MethodHandles$Lookup.lookupModes.*
compileOnly java.lang.invoke.MethodHandleNatives.linkCallSite.*
compileOnly java.lang.invoke.MethodHandleNatives.linkCallSiteImpl.*
compileOnly java.util.Collections$UnmodifiableCollection$1.hasNext.*
compileOnly java.util.concurrent.ConcurrentLinkedQueue.poll.*
compileOnly java.lang.invoke.MethodHandles$Lookup.resolveOrFail.*
compileOnly java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant.*
compileOnly java.lang.invoke.MemberName.hashCode.*
compileOnly java.lang.Byte.hashCode.*
compileOnly java.lang.invoke.LambdaFormEditor$Transform.bval.*
compileOnly java.lang.invoke.MethodHandles$Lookup.checkMethod.*
compileOnly java.lang.invoke.MethodHandles$Lookup.maybeBindCaller.*
compileOnly java.lang.invoke.MethodHandleNatives.isCallerSensitive.*
compileOnly java.lang.invoke.MethodHandleNatives.canBeCalledVirtual.*
compileOnly java.util.Spliterators$EmptySpliterator.estimateSize.*
compileOnly sun.reflect.generics.visitor.Reifier.make.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.Character.getType.*
compileOnly java.lang.invoke.DirectMethodHandle.shouldBeInitialized.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.StringBuilder.append.*
compileOnly java.lang.AbstractStringBuilder.append.*
compileOnly java.lang.StackStreamFactory$AbstractStackWalker.peekFrame.*
compileOnly java.util.stream.MatchOps$BooleanTerminalSink.cancellationRequested.*
compileOnly java.lang.CharacterDataLatin1.getType.*
compileOnly java.util.Collection.stream.*
compileOnly java.util.Spliterators$ArraySpliterator.characteristics.*
compileOnly java.util.Spliterators$IteratorSpliterator.tryAdvance.*
compileOnly java.util.stream.MatchOps$1MatchSink.accept.*
compileOnly java.util.stream.StreamOpFlag.fromCharacteristics.*
compileOnly java.util.stream.Collectors$CollectorImpl.characteristics.*
compileOnly java.util.stream.MatchOps$BooleanTerminalSink.getAndClearState.*
compileOnly sun.reflect.generics.parser.SignatureParser.make.*
compileOnly java.lang.invoke.InvokerBytecodeGenerator.emitImplicitConversion.*
compileOnly java.lang.invoke.LambdaForm$BasicType.basicType.*
compileOnly java.lang.invoke.InvokerBytecodeGenerator.loadInsnOpcode.*
compileOnly java.lang.invoke.LambdaForm$BasicType.basicTypeSlots.*
compileOnly sun.invoke.util.Wrapper.stackSlots.*
compileOnly java.nio.ByteBuffer.array.*
compileOnly java.lang.invoke.VarHandleGuards.guard_LII_Z.*
compileOnly java.util.regex.Matcher.reset.*
compileOnly java.util.regex.Matcher.getTextLength.*
compileOnly java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState.*
compileOnly java.util.ArrayList$ArrayListSpliterator.getFence.*
compileOnly java.lang.invoke.Invokers$Holder.linkToTargetMethod.*
compileOnly java.util.ArrayList$ArrayListSpliterator.tryAdvance.*
